# To do: assign the various punctuation marks within composite commands.
# To do: match the pattern of TWOWAY.

name: 'Stata'
scopeName: 'source.stata'

fileTypes: [
  'do'
  'ado'
]

foldingStartMarker: '\\{$'
foldingStopMarker: '^\\s*\\}'

patterns: [
    { include: '#core' }
    {
        comment: 'interacting with the operating system'
        match: '^\\!.*$'
        name: 'string.other.stata'
    }
    {
        begin: '^\\s*(mata:?)\\s*$'
        beginCaptures:
            "1":
                name: 'keyword.control.stata'
        end: '^\\s*(end)\\s*$'
        endCaptures:
            "1":
                name: 'keyword.control.stata'
        contentName: 'source.mata'
        patterns: [{ include: 'source.mata' }]
    }
    {
        captures:
            "1":
                name: 'source.mata'
            "2":
                patterns: [{ include: 'source.mata' }]
        match: '^\\s*(mata:?)(.*)$'
    }
    {
        captures:
            "1":
                name: 'keyword.control.stata'
            "3":
                name: 'keyword.control.stata'
            "5":
                name: 'keyword.control.stata'
        match: '^\\s*((capture|qui|quiet|quietly|noi|noisi|noisily)\\s+)?(foreach)\\s+(\\w+)\\s+(in|of (loc(al)?|glo(bal)?|(var|new|num)(list)?))\\b'
    }
    {
        captures:
            "1":
                name: 'keyword.control.stata'
            "3":
                name: 'keyword.control.stata'
            "4":
                name: 'keyword.control.stata'
        match: '^\\s*((capture|qui|quiet|quietly|noi|noisi|noisily)\\s+)?(prog|program)(\\s+\\S+)\\s'
    }
    {
        captures:
            "1":
                name: 'keyword.control.stata'
            "3":
                name: 'storage.type.stata'
        match: '^\\s*((capture|qui|quiet|quietly|noi|noisi|noisily)\\s+)?(macro|sca|scalar|matrix)\\s+\\w+\\s*\\='
    }
    {
        captures:
            "1":
                name: 'keyword.control.stata'
            "3":
                name: 'storage.type.stata'
        match: '^\\s*((capture|qui|quiet|quietly|noi|noisi|noisily)\\s+)?((macro|sca|scalar|matrix)\\s+\\S+)\\b'
    }
    {
        captures:
            "1":
                name: 'keyword.control.stata'
            "3":
                name: 'storage.type.stata'
        match: '^\\s*((capture|qui|quiet|quietly|noi|noisi|noisily)\\s+)?(gl(o|ob|obal)?|loc(al)?|temp(var|name|file))\\b'
    }
    {
        captures:
            "1":
                name: 'keyword.operator.stata'
            "2":
                name: 'support.function.stata'
            "3":
                name: 'support.function.stata'
        match: '(:)\\s*(value|variable|data)\\s+(label)\\b'
    }
    {
        captures:
            "1":
                name: 'keyword.operator.stata'
            "2":
                name: 'support.function.macro.stata'
            "3":
                patterns: [{ include: '#core' }]
            "4":
                name: 'support.function.stata'
        match: '(:)\\s*(dir)(\\.+)(files|dir|other)?\\b'
    }
    {
        captures:
            "1":
                name: 'keyword.operator.stata'
            "2":
                name: 'support.function.stata'
            "3":
                name: 'support.function.stata'
        match: '(:)\\s*(label)\\s+\\(?\\w+\\)?(\\s+maxlength)?\\b'
    }
    {
        name: 'support.function.stata'
        captures:
            "1":
                name: 'keyword.control.stata'
            "3":
                name: 'storage.type.variable.stata'
        match: '^\\s*((capture|qui|quiet|quietly|noi|noisi|noisily)\\s+)?((la|label|duplicates)\\s+\\S+)\\b'
    }
    {

        captures:
            "1":
                name: 'keyword.control.stata'
            "3":
                name: 'storage.type.variable.stata'
        match: '^\\s*((capture|qui|quiet|quietly|noi|noisi|noisily)\\s+)?((import|mer|merge|reshape)\\s+\\S+)\\b'
    }
    {
        captures:
            "1":
                name: 'keyword.control.stata'
            "3":
                name: 'entity.name.function.stata'
        match: '^\\s*((capture|qui|quiet|quietly|noi|noisi|noisily)\\s+)?((gr|graph)\\s+\\S+)\\b'
    }
    {
        begin: '^\\s*((capture|qui|quiet|quietly|noi|noisi|noisily)\\s+)?(collapse)\\b'
        beginCaptures:
            "1":
                name: 'keyword.control.stata'
            "3":
                name: 'storage.type.variable.stata'
        end: ','
        patterns: [
            {
                begin: '\\('
                end: '\\)'
                contentName: 'support.function.stata'
            }
            { include: '#core' }
        ]
    }
    {
        comment: 'multi-line commands (possibly unstable!)'
        begin: '^\\s*([a-zA-Z_]+\\s)(.*)(///.*)$'
        end:  '^([^/]+|[^/]*//[^/]+|([^/]*/[^/]+)+)$'
        beginCaptures:
            "1":
                patterns: [{ include: '#first_word' }]
            "2":
                patterns: [{ include: '#core' }]
            "3":
                name: 'comment.line.triple-slash.stata'
        endCaptures:
            "1":
                patterns: [{ include: '#core' }]
        patterns: [{ include: '#core' }]
    }
    {
        comment: 'the first word of any line is probably a command'
        match: '^\\s*((capture|qui|quiet|quietly|noi|noisi|noisily)\\s+)([a-zA-Z_]+)?'
        captures:
            "1":
                name: 'keyword.control.stata'
            "3":
                patterns: [{ include: '#first_word' }]
    }
    {
        comment: 'the first word of any line is probably a command'
        match: '^\\s*([a-zA-Z_]+)\\s'
        captures:
            "1":
                patterns: [{ include: '#first_word' }]
    }
]

repository:
    core:
        patterns: [
            {
                begin: '"'
                end: '"'
                name: 'string.quoted.double.stata'
                patterns: [{ include: '#macros' }]
            }
            {
                begin: '`"'
                end: '"\''
                name: 'string.quoted.double.stata'
                patterns: [{ include: '#macros' }]
            }
            {
                begin: '/\\*'
                end: '\\*/'
                name: 'comment.block.stata'
            }
            {
                match: '//.*'
                name: 'comment.line.stata'
            }
            {
                match: '///.*'
                name: 'comment.line.stata'
            }
            {
                begin: '(\\.+\\\\|[A-Z]:\\\\|\\.+/|[A-Z]:/)'
                end: '(,|\\s)'
                beginCaptures:
                    "1":
                        name: 'string.unquoted.stata'
                contentName: 'string.unquoted.stata'
                patterns: [{ include: '#macros' }]
            }
            {
                match: '\\='
                name: 'keyword.operator.assignment.stata'
            }
            {
                match: '\\+{1}|\\-{1}|\\*{1}|\\^{1}|/{1}'
                name: 'keyword.operator.arithmetic.stata'
            }
            {
                match: '\\&|\\||!|~'
                name: 'keyword.operator.logical.stata'
            }
            {
                match: '<|>|<\\=|>\\=|\\=\\=|!\\=|~\\='
                name: 'keyword.operator.comparison.stata'
            }
            { include: '#macros' }
            {
                match: '\\b(if|else if|else|in|continue|end|return)\\b'
                name: 'keyword.control.stata'
            }
            {
                begin:'\\[((a|f|i|p)?w(eight)?|freq(uency)?|cell(size)?)'
                end:'\\]'
                beginCaptures:
                    "1":
                        name: 'variable.weight.stata'
                patterns: [{ include: '#core' }]
            }
            {
                begin: '\\b(\\w+)\\('
                end: '\\)'
                beginCaptures:
                  "1":
                    patterns: [
                        {
                            name: 'storage.type.variable.stata'
                            match: '\\b(g|gen|generate|keep(us|using)?)\\b'
                        }
                        {
                            name: 'support.function.stata'
                            match: '\\b(\\w+)\\b'
                        }
                    ]
                patterns: [{ include: '#core' }]
            }
            {
                comment: 'a colon usually defines a command as the object of another command'
                match: '(:)\\s+(\\w+)'
                captures:
                    "1":
                        name: 'keyword.operator.stata'
                    "2":
                        patterns: [{ include: '#first_word' }]
            }
            {
                comment: 'various data-management commands'
                match: '\\b(using|clear)\\b'
                name: 'storage.type.variable.stata'
            }
        ]
    macros:
        patterns: [
            {
                name: 'variable.interpolation.stata'
                begin: '`'
                end: '\''
            }
            {
                name: 'variable.interpolation.stata'
                match: '\\$\\w+'
            }
            {
                name: 'variable.interpolation.stata'
                begin: '\\$\\{'
                end: '\\}(?!\\})'
            }
        ]
    first_word:
        patterns: [
            {
                comment: 'functions that generate or modify variables'
                match: '\\b(g|gen|generate|egen|predict|(pc|x)tile|replace|rename)\\b'
                name: 'storage.type.variable.stata'
            }
            {
                comment: 'functions to transform string variables'
                match: '\\b((de|en)code|(de|to)string)\\b'
                name: 'storage.type.variable.stata'
            }
            {
                comment: 'functions to manipulate datasets or observations'
                match: '\\b(use|append|rename|drop|keep|order|sort|note|format)\\b'
                name: 'storage.type.variable.stata'
            }
            {
                comment: 'functions to manipulate datasets or observations'
                match: '\\b(contract)\\b'
                name: 'storage.type.variable.stata'
            }
            {
                comment: 'user-defined command'
                match: '\\b(geonear|windsor)\\b'
                name: 'storage.type.variable.stata'
            }
            {
                match: '\\b(if|else if|else|in|continue|end|return)\\b'
                name: 'keyword.control.stata'
            }
            {
                match: '\\b(forv(al|alues)?|while)\\b'
                name: 'keyword.control.stata'
            }
            {
                match: '\\b(capture|qui|quiet|quietly|noi|noisi|noisily)\\b'
                name: 'keyword.control.stata'
            }
            {
                match: '\\b(by|bys|bysort)\\b'
                name: 'keyword.control.stata'
            }
            {
                comment: 'the first word of any line is probably a command'
                match: '\\b(\\w+)\\b'
                name: 'entity.name.function.stata'
            }
        ]
